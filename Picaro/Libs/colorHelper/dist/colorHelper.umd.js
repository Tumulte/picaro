(function(i,s){typeof exports=="object"&&typeof module<"u"?s(exports):typeof define=="function"&&define.amd?define(["exports"],s):(i=typeof globalThis<"u"?globalThis:i||self,s(i.ColorHelper={}))})(this,function(i){"use strict";var $=(i,s,l)=>{if(!s.has(i))throw TypeError("Cannot "+l)};var H=(i,s,l)=>{if(s.has(i))throw TypeError("Cannot add the same private member more than once");s instanceof WeakSet?s.add(i):s.set(i,l)};var f=(i,s,l)=>($(i,s,"access private method"),l);var l,b,d,p;class s{constructor(t){H(this,l);H(this,d);this.color=t}isHexColor(t){return/^#([0-9A-F]{3}){1,2}$/i.test(t)}hexToRgb(t){if(!this.isHexColor)throw new Error("Not a valid Hex color");if(this.color=this.getString(t||this.color),this.color.includes("rgb("))return this;let o=this.color.replace("#","");o.length===3&&(o=o.split("").map(function(n){return`${n+n}`}).join(""));const e=f(this,l,b).call(this,o.substring(0,2)),a=f(this,l,b).call(this,o.substring(2,4)),r=f(this,l,b).call(this,o.substring(4,6));return this.color={red:e,green:a,blue:r},this}rgbToHex(t){if(this.color=this.getValueCollection(t||this.color),"red"in this.color)this.color=`#${f(this,d,p).call(this,this.color.red)}${f(this,d,p).call(this,this.color.green)}${f(this,d,p).call(this,this.color.blue)}`;else throw new Error('The rgbToHex method require a "{red: XXX, green: YYY, blue: ZZZ}" object as input value');return this}rgbToHsl(t){if(this.color=this.getValueCollection(t||this.color),!("red"in this.color))throw new Error('The rgbToHsl method require a "{red: XXX, green: YYY, blue: ZZZ}" object as input value');const o=[this.color.red/255,this.color.green/255,this.color.blue/255];o.sort(function(x,T){return x-T});const e=o[0],a=o[1],r=o[2],n=Math.round((e+r)*100/2);if(r===e&&a===e)return this.color={light:n,saturation:0,hue:0},this;let c;n>50?c=(r-e)/(2-r-e):c=(r-e)/(r+e),c=Math.round(c*100);let h;return r===this.color.red/255?h=(this.color.green-this.color.blue)/255/(r-e):r===this.color.green/255?h=2+(this.color.blue-this.color.red)/255/(r-e):h=4+(this.color.red-this.color.green)/255/(r-e),h<0?h=Math.round(h*60)+360:h=Math.round(h*60),this.color={light:n,saturation:c,hue:h},this}hslToRgb(t){if(this.color=this.getValueCollection(t),!("hue"in this.color))throw new Error('The hslToRgb method require a "{hue: XXX, saturation: YYY, light: ZZZ}" object as input value, or hsl(XXX, YYY%, ZZZ%) string');const o=this.color.light/100,e=this.color.saturation/100,a=this.color.hue/360;if(this.color.saturation===0){const u=Math.round(o*255);return this.color={red:u,green:u,blue:u},this}let r;o<.5?r=o*(1+e):r=o+e-o*e;const n=2*o-r,c=function(u,w,g){return g<0?g+=1:g>1&&(g-=1),g<1/6?u+(w-u)*6*g:g<1/2?w:g<2/3?u+(w-u)*(2/3-g)*6:u},h=c(n,r,a+1/3),x=c(n,r,a),T=c(n,r,a-1/3);return this.color={red:Math.round(h*255),green:Math.round(x*255),blue:Math.round(T*255)},this}hexToHsl(t){return t&&(this.color=t),this.color=this.hexToRgb(this.color).getValueCollection(),this.color=this.rgbToHsl(this.color).getValueCollection(),this}hslToHex(t){return t&&(this.color=t),this.color=this.hslToRgb(this.color).getValueCollection(),this.color=this.rgbToHex(this.color).getValueCollection(),this}getString(t){if(t&&(this.color=t),typeof this.color=="string")return this.color;if("red"in this.color)return`rgb(${this.color.red},${this.color.green},${this.color.blue})`;if("hue"in this.color)return`hsl(${this.color.hue},${this.color.saturation}%,${this.color.light}%)`;if("hexred"in this.color)return`#${this.color.hexred}${this.color.hexgreen}${this.color.hexblue}`;throw new Error('The getString method only takes Objects with the following keys : "hue, saturation, light" (with HSL values) - "hexblue, hexgreen, hexred" (with Hexadecimal RGB), "red, green, blue" (with base 256 RGB)')}getValueCollection(t){if(typeof t<"u"&&(this.color=t),typeof this.color!="string")return this.color;const o=new RegExp(/^#([0-9a-f]{3}){1,2}$/i);if(typeof this.color=="object")return this.color;if(this.color.indexOf("rgb(")>-1){const e=this.color.split("(")[1].split(",");return{red:parseInt(e[0]),green:parseInt(e[1]),blue:parseInt(e[2])}}else if(this.color.indexOf("hsl(")>-1){const e=this.color.split("(")[1].split(" ");return{hue:parseInt(e[0]),saturation:parseInt(e[1]),light:parseInt(e[2])}}else if(o.test(this.color)){const e=this.color;return{hexred:e.substring(1,3),hexgreen:e.substring(3,5),hexblue:e.substring(5,7)}}else throw new Error("The color you provided is not a valid color")}}l=new WeakSet,b=function(t){return parseInt(t,16)},d=new WeakSet,p=function(t){let o=t.toString(16);return o.length===1&&(o=`0${o}`),o.toUpperCase()},i.ColorHelper=s,Object.defineProperty(i,Symbol.toStringTag,{value:"Module"})});
